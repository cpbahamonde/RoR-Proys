$ rails g model user name email password_digest
{Pantalla}
      invoke  active_record
      create    db/migrate/20220513151625_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/models/user_test.rb
      create      test/fixtures/users.yml

$ rails db:migrate
{Pantalla}
== 20220513151625 CreateUsers: migrating ======================================
-- create_table(:users)
   -> 0.0045s
== 20220513151625 CreateUsers: migrated (0.0051s) =============================

# Modif Model User
class User < ApplicationRecord
    has_secure_password
    validates :email, uniqueness: true, 
    // validates :email, presences: true

end

# Modif Config/routes
Rails.application.routes.draw do
  resources :stories
  resources :users, only: [:new, :create, :show]
  root 'stories#index'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end

$ rails g controller Users new create show
{Pantalla}
      create  app/controllers/users_controller.rb
       route  get 'users/new'
              get 'users/create'
              get 'users/show1'
              get 'users/create'
              get 'users/show'
      invoke  erb
      create    app/views/users
      create    app/views/users/new.html.erb
      create    app/views/users/create.html.erb
      create    app/views/users/show.html.erb
      invoke  test_unit
      create    test/controllers/users_controller_test.rb
      invoke  helper
      create    app/helpers/users_helper.rb
      invoke    test_unit

# Modif User/view/users/view
<div class="row">1
    <div class="col-md-3">
        <h1>Registro de usuario</h1>
        <%= form_with(model: @user, local: true) do |form| %>
            <% if @user.errors.any? %>
                <div id="error_explanation">
                    <h2><%= pluralize(@user.errors.count, "error") %> prohibited this user from being saved:</h2>

                    <ul>
                    <% @user.errors.full_messages.each do |message| %>
                        <li><%= message %></li>
                    <% end %>
                    </ul>
                </div>
            <% end %>
            <div class="form-group">
                <%= form.label :Nombre  %>
                <%= form.text_field :name, id: :user_name, class:'form-control' %>
            </div>

            <div class="form-group">
                <%= form.label :email %>
                <%= form.email_field :email, id: :user_email, class:'form-control' %>
            </div>

            <div class="form-group">
                <%= form.label :password %>
                <%= form.password_field :password, id: :user_password, class:'form-control' %>
            </div>

            <div class="form-group">
                <%= form.label :password_confirmation %>
                <%= form.password_field :password_confirmation, id: :user_password_confirmation , class:'form-control'%>
            </div>
            <div class="form-group">
                <%= form.submit class:'btn btn-success' %>
            </div>
        <% end %>
    </div>
</div>

# Modif Controller/User
 def create
    user = User.new(user_params)
    if user.save
      session[:user_id] = user.id
      redirect_to root_path
    else
      render :new, notice: 'No ha sido posible crear al usuario'
    end
  end

$ rails g controller Sessions new create destroy
{Pantalla}
      create    test/controllers/sessions_controller_test.rb
      invoke  helper
      create    app/helpers/sessions_helper.rb
      invoke    test_unit

$ rails routes
{Pantalla}
	Prefix 	Verb   URI Pattern        	Controller#Action
	sessions 	POST   /sessions(.:format)    sessions#create
	new_session GET    /sessions/new(.:format)sessions#new
	session 	DELETE /sessions/:id(.:format)sessions#destroy

# Modif Session controller
    def destroy
      reset_session
      redirect_to root_path
    end

    def new
      @user = User.new
    end

    def create
      @user = User.find_by_email(params[:user][:email])
      if @user.authenticate(params[:user][:password])
        session[:user_id] = @user.id
        redirect_to :root
      else
        render :new, notice: 'Usuario o clave incorrecto'
      end
    end


Modif helpér_application
module ApplicationHelper
    def logged?
        session[:user_id].present?
    end

    def current_user
        User.find(session[:user_id])
    end
end


Modif Nab-bar

<nav class="navbar navbar-default">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="<%= root_path %>">PicStory</a>
    </div>
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <% unless logged? %>
        <li><%=link_to 'Registro', new_user_path unless logged? %></li>
        <li><%=link_to 'Iniciar Sesión', new_session_path %></li>
        <% end %>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <!-- ¡Pending implementation! Should work toggling between sign_in and sign_out -->
        <% if logged? %>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
            <i class="fa fa-user-circle-o" style="font-size:24px""></i>
            <span class="caret"></span>
          </a>
          <ul class="dropdown-menu">
            <li><%=link_to 'Create PicStory', new_story_path %></li>
            <li><%=link_to 'My PicStories', user_path(current_user) %></a></li>
            <li role="separator" class="divider"></li>
            <li><%= link_to 'Sign Out', session_path(current_user), method: :delete %><a href="#"></a></li>
          </ul>
        </li>
        <% end %>
      </ul>
    </div>
  </div>
</nav>


# Modif model story add
belongs_to :user

# Modif model user add
has_many :stories

$ rails g migration AddUserToStories user:references

$ rails db:migrate

# Rev en schema/-> table "stories"
    t.integer "user_id", null: false
    t.index ["user_id"], name: "index_stories_on_user_id"


